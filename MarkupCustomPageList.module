<?php
/**
 * Custom Page List Module for ProcessWire 2.2 or greater
 *
 * Customize your page list display in the backend.
 *
 * @version   1.0.3
 * @copyright (c) 2013
 * @link      https://github.com/hgassen/custom-page-list
 * @author    Heiner Gassen
 * @license   GNU/GPL v2
 * 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * Redistributions of files must retain the above copyright notice.
 */
class MarkupCustomPageList extends WireData implements Module, ConfigurableModule {

    protected static $defaults = array(
        'primaryClassName' => 'label-main',
        'secondaryClassNameLabel' => 'label-name',
        'secondaryClassNameValue' => 'label-value',
        'separatorBeforeSecondary' => '[',
        'separatorBetweenSecondary' => '|',
        'separatorAfterSecondary' => ']',
        'dateTimeFormat' => 'Y-m-d H:i:s',
        'imageClassName' => 'label-image',
        'pageLabelImageSize' => '24',
        'showEditTemplateLink' => 1,
        'custom' => '',
    );
 
    static public function getModuleInfo() {
        return array(
            'title' => 'Custom Page List',
            'summary' => 'Customize your page list display in the backend.',
            'author' => 'Heiner Gassen',
            'href' => 'https://github.com/hgassen/custom-page-list',
            'version' => 103,
            'autoload' => true,
            'singular' => true,
            'requires' => array('ProcessPageList'),
        );
    }


	public function init() {
        $this->config->styles->add($this->config->urls->MarkupCustomPageList . 'MarkupCustomPageList.css');
        $this->addHookBefore('ProcessPageListRender::getPageLabel', $this, 'hookPageLabel');
        $this->addHookAfter('ProcessPageListRender::getPageActions', $this, 'hookPageActions');
        $this->addHookAfter('Pageimages::delete', $this, 'deleteThumb');
	}
	

    public function hookPageLabel(HookEvent $event) {
        
        $options = $this->getOptions();

        $event->replace = true;
        $page = $event->arguments('page');

		$value = array();
		$out = '';

		// If the page's template specifies a pageLabelField, use that 
		$pageLabelField = trim($page->template->pageLabelField);
		
		// Or the field from the ProcessPageList module
		if (!$pageLabelField) {
            $pageLabelField = $this->modules->get('ProcessPageList')->pageLabelField;
		}
		
		// Fallback if for some reason ProcessPageList is not installed
		if (!$pageLabelField) {
		    $pageLabelField = 'title';
		}        

		if (strpos($pageLabelField, ' ')) {
		    $fields = explode(' ', $pageLabelField);
		} else {
		    $fields = array($pageLabelField);
		}

        // We keep track of image fields and process only the first one
        $thumbExists = false;
        
        
		foreach($fields as $i => $field) {

			if (strpos($field, '.')) {
				list($field, $subfield) = explode(".", $field); 
			} else {
			    $subfield = '';
			}

			$v = $page->get($field);
			
			// Image field (taken from Soma's PageListImageLabel)
			// @see http://modules.processwire.com/modules/page-list-image-label/
			// @see https://github.com/somatonic/PageListImageLabel
            if ($v instanceof Pageimages && $thumbExists === false) {
                
                // Get image sizes
                if (strpos($options['pageLabelImageSize'], ',') !== false) {
                    $size = explode(',', $options['pageLabelImageSize']);
                    $sizeWidth = $size[0];
                    $sizeHeight = $size[1];
                } else {
                     $sizeWidth = $options['pageLabelImageSize'];
                     $sizeHeight = $options['pageLabelImageSize'];
                }
                
                if (!is_numeric($sizeWidth) || !is_numeric($sizeHeight)) {
                    $sizeWidth = $sizeHeight = 24;
                }

                if (count($v)) {
                    // If image field is of type cropimage (thumbnails module)
                    if ($this->fields->get($field)->type == 'FieldtypeCropImage' && $subfield) {
                        $thumbUrl = $v->first()->getThumb($subfield);
                        $thumbUrl = $v->url . $this->resizeThumb($v, $thumbUrl, array($sizeWidth, $sizeHeight));
                    // Normal image fields
                    } else {
                        $thumbUrl = $page->$field->first()->size($sizeWidth, $sizeHeight)->url;
                    }
                }
                    
                if (!empty($thumbUrl)) {
                    $thumb = '<span class="' . $options['imageClassName'] . '"><img src="' . $thumbUrl . '" /></span>';
                    $thumbExists = true;
                }
                
                $v = '';
            }
                        

			if ($subfield && is_object($v)) {
				if ($v instanceof WireArray && count($v)) {
				    $v = $v->first();
		        }
				$v = $v->get($subfield);
			} 

                
            // Created & modified fields
			if ($field == 'created' || $field == 'modified') {
			    $v = date($options['dateTimeFormat'], (int)$v);
			}

            else if (isset($page->fields->get($field)->type)) {

    			// Datetime fields
    			if ($page->fields->get($field)->type instanceof FieldtypeDatetime) {
    			    if (!empty($page->fields->get($field)->dateOutputFormat)) {
        			    $v = date($page->fields->get($field)->dateOutputFormat, (int)$v);
        			} else {
        			    $v = date($options['dateTimeFormat'], (int)$v);
        			}
    			}		    

    			// Checkbox fields
    			else if ($page->fields->get($field)->type instanceof FieldtypeCheckbox) {
    			    $v = ($v == 1 ? $this->_('Yes') : $this->_('No'));
    			}

    			// Page fields
    			else if ($page->fields->get($field)->type instanceof FieldtypePage && !$subfield) {
                    
            		$titles = array();
                    if($v instanceof PageArray){
                        foreach($v as $p) {
                            $titles[] = $p->title;
                        }
                    } else {
                        $titles[] = $v->title;
                    }
            		
            		$v = implode(', ', $titles);
    			}

    			// File fields
    			else if ($page->fields->get($field)->type instanceof FieldtypeFile) {
    			    $v = str_replace('|', ', ', $v);
    			}
    		}
			
			if (!empty($v)) {
		        $value[] = array($field . ($subfield ? '.' . $subfield : ''), $v);
			}
		}

		// Default
		if (!$value) {
		    $value[] = array('', $page->get('name'));
		}
        

        // If we have an image, we output it first
        if (!empty($thumb)) {
		    $out .= $thumb;
		}

		// Get the first element...
		$first = array_shift($value);
		$out .= '<span class="' . $options['primaryClassName'] . '">' . htmlspecialchars(strip_tags($first[1]), ENT_QUOTES, 'UTF-8', false) . '</span> ';
		
		// ... and the others
		if ($value) {
		    
		    $out .= '<span class="' . $options['secondaryClassNameLabel'] . '">' . $options['separatorBeforeSecondary'] . '</span>';
		    
    		foreach($value as $i => $element) {
    		    
    		    if ($i != 0) {
    		        $out .= ' <span class="' . $options['secondaryClassNameLabel'] . '">' . $options['separatorBetweenSecondary'] . '</span> ';
    		    }
    		    
    		    // Check for custom data
    		    $defaultLabelName = $element[0];
    		    
    		    // Custom name for this label?
    		    if (isset($options['custom'][$defaultLabelName]['label'])) {
    		        $element[0] = $options['custom'][$defaultLabelName]['label'];
    		    }
    		    
    		    // Output filter: truncate
    		    if (!empty($options['custom'][$defaultLabelName]['truncate'])) {
    		        $element[1] = $this->filter('truncate', $options['custom'][$defaultLabelName]['truncate'], $element[1]);
    		    }
    		    
    		    // Output filter: style
    		    if (!empty($options['custom'][$defaultLabelName]['style'])) {
    		        $style = $this->filter('style', $options['custom'][$defaultLabelName]['style']);
    		    } else {
    		        $style = '';
    		    }
    		    
    		    if ($element[0]) {
    		        $element[0] .= ': ';
    		    }
    		    
    	        $out .= '<span class="' . $options['secondaryClassNameLabel'] . '">' . htmlspecialchars(strip_tags($element[0]), ENT_QUOTES, 'UTF-8', false) . '</span>';
    	        $out .= '<span class="' . $options['secondaryClassNameValue'] . '"' . $style . '>' . htmlspecialchars(strip_tags($element[1]), ENT_QUOTES, 'UTF-8', false) . '</span>';
    		}
    		
    		$out .= '<span class="' . $options['secondaryClassNameValue'] . '">' . $options['separatorAfterSecondary'] . '</span>';		    
		}
		
        $event->return = $out;
    }
    

    public function hookPageActions(HookEvent $event) {
        
        if (!$this->user->isSuperuser()) {
            return;
        }
        
        $options = $this->getOptions();
        if (!$options['showEditTemplateLink']) {
    		return;
        }
        
        $page = $event->arguments('page');        
        $actions = $event->return;
        $actions[] =  array(
			'cn' => 'Edit-template', 
			'name' => $this->_('Edit template'), 
			'url' => $this->config->urls->admin . 'setup/template/edit?id=' . $page->template->id,
		);                        
		$event->return = $actions;
	}
	

    /**
	 * Generate thumb for image of type cropimage
	 *
	 */
    private function resizeThumb($field, $thumbUrl, $size) {
        
        $basename = basename($thumbUrl);
        list($img, $ext) = $this->splitImageBasename($basename);
    	$thumbPath = $field->path() . $basename;
        $filename = $img . '.' . $size[0] . 'x' . $size[1] . '.' . $ext;
        $thumbPathNew = $field->path() . $filename;
        
        // If the thumb already exists, no need to resize again
    	if (file_exists($thumbPathNew)) {
    	    return $filename;
    	}
    	
        if (@copy($thumbPath, $thumbPathNew)) {
            $sizer = new ImageSizer($thumbPathNew);
            $sizer->resize($size[0], $size[1]);
            return $filename;
        }
        return false;
    }
    
    
    /**
	 * Delete generated thumbnail if parent image of type cropimage is removed
	 *
	 */
	public function deleteThumb(HookEvent $event) {
	    
		$images = $event->object; 	
		$image = $event->arguments[0]; 
		if (is_string($image)) {
		    $image = $images->get($image);
		}
		if ($image) {
		    list($img, $ext) = $this->splitImageBasename($image->basename);
		    foreach(glob($images->path . '*_' . $img . '.*x*.' . $ext) as $file) {
    		    if (@unlink($file)) {
        		    $this->message("Removed thumb: " . basename($file), Notice::debug);     		        
    		    }
    		}		    
    	}	
	}
	
	
	private function splitImageBasename($basename) {
	    return explode('.', $basename);
	}	
	
	
    private function getOptions() {    
        
        if (isset($this->options)) {
            return $this->options;
        }
            
        $defaults = self::$defaults;
        $options = array();
        
        foreach($defaults as $key => $value) {
            $options[$key] = $this->get($key) !== null ? $this->get($key) : $defaults[$key];
        }
        
		$options['custom'] = $this->getCustomOptions($options['custom']);
		$this->options = $options;
        return $options;
    }
    
    
    private function getCustomOptions($option) {
        
	 	$lines = preg_split('/[\r\n]+/', $option); 
		$map = array();
		
		foreach ($lines as $line) {
		    
		    if (strpos($line, '|') !== false) {
		        $aLine = explode('|', $line);
		    } else {
		        $aLine = array($line);
		    }
		    
		    $first = array_shift($aLine);
		    if (strpos($line, '=') !== false) {
    		    list($label, $customLabel) = explode('=', $first);
    		    $label = trim($label);
    			$map[$label]['label'] = trim($customLabel); 				    		        
		    }	
		    	    
		    if (count($aLine)) {
    			foreach($aLine as $ln) {
    			    if (strpos($line, '=') !== false) {
            			list($k, $v) = explode('=', $ln);
            			$map[$label][trim($k)] = trim($v); 				    
        			}
    			}		        
		    }
		}
        return $map;
    }
    
    
    private function filter($name, $value, $string = '') {
        switch ($name) {
            case 'truncate':
                return mb_substr($string, 0, (int)$value) . '...';
                break;
            case 'style':
                return ' style="' . $value . '" ';
                break;
                
            default:
                return false;
        }
    }


    static public function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::$defaults, $data);

        $fields = new InputfieldWrapper();
        $modules = Wire::getFuel('modules');
        

        // Fieldset "Class names"
        $fieldset = $modules->get('InputfieldFieldset'); 
		$fieldset->attr('id', 'class_names');
		$fieldset->entityEncodeLabel = false; 
		$fieldset->label = __('Class Names');
		$fieldset->collapsed = Inputfield::collapsedYes;
		$fields->add($fieldset);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'primaryClassName');
        $field->attr('size', 20);
        $field->attr('value', $data['primaryClassName']);
        $field->label = __('Class name for the value of the primary field');
		$field->description = __('Defaults to "label-main" defined in the module\'s CSS file.');
		$field->notes = '';
		$field->columnWidth = 33;
		$fieldset->add($field);
        
        $field = $modules->get('InputfieldText');
        $field->attr('name', 'secondaryClassNameLabel');
        $field->attr('size', 20);
        $field->attr('value', $data['secondaryClassNameLabel']);
        $field->label = __('Class name for the labels of secondary fields');
		$field->description = __('Defaults to "label-name" defined in the module\'s CSS file.');
		$field->notes = '';
		$field->columnWidth = 33;
		$fieldset->add($field);
        
        $field = $modules->get('InputfieldText');
        $field->attr('name', 'secondaryClassNameValue');
        $field->attr('size', 20);
        $field->attr('value', $data['secondaryClassNameValue']);
        $field->label = __('Class name for the values of secondary fields');
		$field->description = __('Defaults to "label-value" defined in the module\'s CSS file.');
		$field->notes = '';
		$field->columnWidth = 34;
		$fieldset->add($field);
        
        
        // Fieldset "Separators"
        $fieldset = $modules->get('InputfieldFieldset'); 
		$fieldset->attr('id', 'class_names');
		$fieldset->entityEncodeLabel = false; 
		$fieldset->label = __('Separators');
		$fieldset->collapsed = Inputfield::collapsedYes;
		$fields->add($fieldset);
		
        $field = $modules->get('InputfieldText');
        $field->attr('name', 'separatorBeforeSecondary');
        $field->attr('size', 20);
        $field->attr('value', $data['separatorBeforeSecondary']);
        $field->label = __('Separator between primary and secondary fields');
		$field->description = __('Defaults to "[".');
		$field->notes = '';
		$field->columnWidth = 33;
		$fieldset->add($field);
        
        $field = $modules->get('InputfieldText');
        $field->attr('name', 'separatorBetweenSecondary');
        $field->attr('size', 20);
        $field->attr('value', $data['separatorBetweenSecondary']);
        $field->label = __('Separator between secondary fields');
		$field->description = __('Defaults to "|".');
		$field->notes = '';
		$field->columnWidth = 33;
		$fieldset->add($field);
        
        $field = $modules->get('InputfieldText');
        $field->attr('name', 'separatorAfterSecondary');
        $field->attr('size', 20);
        $field->attr('value', $data['separatorAfterSecondary']);
        $field->label = __('Separator after secondary fields');
		$field->description = __('Defaults to "]".');
		$field->notes = '';
		$field->columnWidth = 34;
		$fieldset->add($field);


        // Fieldset "Images"
        $fieldset = $modules->get('InputfieldFieldset'); 
		$fieldset->attr('id', 'class_names');
		$fieldset->entityEncodeLabel = false; 
		$fieldset->label = __('Images');
		$fieldset->collapsed = Inputfield::collapsedYes;
		$fields->add($fieldset);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'imageClassName');
        $field->attr('size', 20);
        $field->attr('value', $data['imageClassName']);
        $field->label = __('Image class name');
        $field->description = __('Class name  for the <span> surrounding the image. Defaults to "label-image" defined in the module\'s CSS file.');
        $field->notes = '';
		$field->columnWidth = 50;
		$fieldset->add($field);

        $field = $modules->get('InputfieldText');
        $field->attr('name', 'pageLabelImageSize');
        $field->attr('size', 20);
        $field->attr('value', $data['pageLabelImageSize']);
        $field->label = __('Image size');
        $field->description = __('Thumbnail size. Specify two comma separated numbers or a single number for square thumbnails. Will be ignored if field is of type FieldtypeCropImage (Thumbnail Module).');
		$field->columnWidth = 50;
		$fieldset->add($field);


        // Field DateTimeFormat for created and modified
        $field = $modules->get('InputfieldText');
        $field->attr('name', 'dateTimeFormat');
        $field->attr('size', 20);
        $field->attr('value', $data['dateTimeFormat']);
        $field->label = __('Display format for "created" and "modified" fields');
		$field->description = __('Must be a valid string for PHP\'s date() function. Defaults to "Y-m-d H:i:s".');
		$field->notes = '';
		$field->columnWidth = 50;
        $fields->append($field);
        
        // Checkbox "Templates"
        $field = $modules->get("InputfieldCheckbox");
        $field->attr('name', 'showEditTemplateLink');
        $field->attr('value', 1);
        $field->value = 1;
		$field->attr('checked', $data['showEditTemplateLink'] ? 'checked' : '');
        $field->label = __('Show template edit link');
        $field->description = __('Shows an additional link to edit the page\'s template (only for authorized users).');
		$field->columnWidth = 50;
        $fields->append($field);
        
        // Custom params
		$field = $modules->get("InputfieldTextarea");
		$field->attr('name', 'custom');
		$field->attr('value', $data['custom']);
		$field->attr('rows', 15); 
		$field->label = __('Custom parameters');
		$field->description = __('Enter your custom labels, one custom label per line in key=value format. Meaning, on each new line, enter the standard label you want to replace followed by an equals sign "=" and the custom label you want to replace with. Leave the custom label blank if you don\'t want to display a label. Additional parameters can be added on each line (see README file).');
		$field->notes = "Example:\ntemplate.name=Template\nbody=Content|truncate=25|style=color:#cc3333;font-weight:bold";
		$fields->append($field);
		
        
        return $fields;
    }
}
